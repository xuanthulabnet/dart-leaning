<?
/**
 * @var $this PhpRenderer
 */
$index_article =\XT\Core\Common\Common::sendevent('dynamic_load_phtml',
    ['file'=>'module/Application/view/dynamiccontent/dart.php', 'view'=>$this])->last();

$nav = $index_article->renderlist();

\XT\Core\Common\Common::eventValue(\XT\Core\System\KeyView::startNav(),$nav);

$index_article = [
    ['ifelse' , '<strong>Lệnh if - else</strong>'],
    ['switchcase' , '<strong>Lệnh rẽ nhánh switch</strong>'],
    ['for' , '<strong>Vòng lặp for</strong>'],
    ['dowhile' , '<strong>Vòng lặp do ... while</strong>'],
    ['while' , '<strong>Vòng lặp while</strong>'],
    ['cbreak' , '<strong>Lệnh continue và break</strong>'],
    ['Assert' , '<strong>Test với Assert</strong>'],


];

?>

    <div>
        <a class="badge badge-warning" href="#ifelse">if - else</a>
        <a class="badge badge-warning" href="#switchcase">switch</a>
        <a class="badge badge-warning" href="#for">for</a>
        <a class="badge badge-warning" href="#dowhile">do ... while</a>
        <a class="badge badge-warning" href="#while">while</a>
        <a class="badge badge-warning" href="#cbreak">continue - break</a>
        <a class="badge badge-warning" href="#Assert">Assert</a></div>

    <a id="<?=$index_article[0][0]?>" name="<?=$index_article[0][0]?>"></a>
    <h2 class="text-danger display-4 font30">Câu lệnh if - else</h2>
<p>Dạng 1, thực hiện khối lệnh khi biểu thức logic kiểm tra là <code>true</code></p>
<pre class="prettyprint lang-js">
if (biểu_thức) {
    //Viết lệnh chạy khi biểu_thức là true
}
</pre>
<p>Dạng 2, nếu điều kiện là đúng thực hiện khối lệnh 1, nếu sai thực hiện khối lệnh 2</p>
<pre class="prettyprint lang-js">
if (biểu_thức) {
    //Viết lệnh chạy khi biểu_thức là true
} else {
    //Viết lệnh chạy khi biểu thức là false
}
//CÓ THỂ VIẾT NHIỀU LỆNH IF
if (biểu_thức_1) {
    //..Các câu lệnh
} else if (biểu_thức_2) {
    //Các câu lệnh
} else if (biểu_thức_3) {
    //Các câu lệnh
} else {
    //Các câu lệnh
}
</pre>
<pre class="prettyprint lang-js">
var a = 12;
if (a < 10) {
    print('a nhỏ hơn 10');
} else if (a < 8) {
    print('a nhỏ hơn 8');
}
else {
    print('a lớn hơn hoặc bằng 10');
}
</pre>
    <a id="<?=$index_article[1][0]?>" name="<?=$index_article[1][0]?>"></a>
    <h2 class="text-danger display-4 font30">Câu lệnh rẽ nhánh switch</h2>
<p>Khi cần rẽ nhiều nhánh, thay vì dùng nhiều lệnh if else ở trên thì có thể dùng switch với cú pháp</p>
<pre class="prettyprint lang-js">
switch (biểu_thức) {
    case : giá_trị_1
      // Khối lệnh
      break;
    case : giá_trị_2
      //Khối lệnh
    break;

    default:
      //Khối lệnh mặc định
}
</pre>
<p>Giá trị của <code>biểu_thức</code> được so sánh với các giá trị <code>giá_trị_1</code>, <code>giá_trị_2</code> ... nếu bằng
cái nào thì thi hành khối lệnh bắt đầu tử điểm đó cho đến khi gặp <code>break;</code></p>
<p>Nếu có khối <code>default</code> thì khi không có giá trị nào phù hợp sẽ thi hành khối này.</p>
<pre class="prettyprint lang-js">
var t = 0;
switch(t) {
    case 0:
      print('Chủ Nhật');
    break;

    case 1:
      print('Thứ 2');
    break;

    default:
      print('Không có giá trị nào');
}
</pre>

    <a id="<?=$index_article[2][0]?>" name="<?=$index_article[2][0]?>"></a>
    <h2 class="text-danger display-4 font30">Vòng lặp for</h2>
    <p>Cú pháp:</p>
    <pre class="prettyprint lang-js">for (statement1; statement2; statement3) {
    Khối lệnh thi hành
}
</pre>
    <ul>
        <li><code>statement1</code> : lệnh thi hành trước khi vòng lặp <code>for</code> bắt đầu</li>
        <li><code>statement2</code> : điều kiện kiểm tra trước mỗi lần thi hành khối lệnh
            <code>for</code>  (<code>true</code> thì khối lệnh sẽ thi hành, <code>false</code> sẽ khối for sẽ không thi hành - thoát lặp)</li>
        <li><code>statement3</code> : thi hành sau mỗi lần một vòng hoàn thành</li>

    </ul>
    <p>Ví dụ:</p>
    <pre class="prettyprint lang-js">
for (var i=1; i<=5; i++) {
    print(i);
}
//In ra
    1
    2
    3
    4
    5
</pre>
    <p>Có thể bỏ qua <code>statement1</code> (vẫn giữ lại dấu <code>;</code>)</p>
    <pre class="prettyprint lang-js">
var i = 1;
for (; i<=5; i++) {
    print(i);
}

//In ra
    1
    2
    3
    4
    5
</pre>
    <p>Tương tự bạn có thể bỏ qua <code>statement3</code> và <code>statement2</code> (vẫn giữ <code>;</code>), lưu ý bạn cũng có thể sử dụng lệnh <code>break;</code> để thoát vòng lặp.</p>
<pre class="prettyprint lang-js">
var k = 0;
for (;;k+=2) {
  if (k>10) break;
  print(k);
}
    //In ra
    2
    4
    6
    8
    10
</pre>

    <a id="<?=$index_article[3][0]?>" name="<?=$index_article[3][0]?>"></a>
    <h2 class="display-4 font35 text-primary">Vòng lặp while trong Dart</h2>
    <p>Thi hành khối lệnh khi mà điều kiện kiểm tra vẫn là <code>true</code></p>
    <pre class="prettyprint lang-js">
while (điều-kiện) {
   //Khối lệnh
}
</pre>
    <p>Đầu tiên nó kiểm tra điều kiện, nếu <code>true</code> sẽ thi hành khối lệnh. Đến cuỗi khối lại kiểm tra điều kiện,
        nếu điều kiện vẫn là <code>true</code> thì lại tiếp tục thì hành vòng mới của khối lệnh.</p>
    <p>Ví dụ</p>
<pre class="prettyprint lang-js">
var i=0;
while (i<=5) {
    print(i);
    i++;
}
//In ra
    0
    1
    2
    3
    4
    5
</pre>
    <p>Lưu ý về việc sau một số vòng thì điều kiện phải là <code>false</code> nếu không vòng lặp sẽ lặp lại vô tận.</p>


    <a id="<?= $index_article[4][0] ?>" name="<?= $index_article[4][0] ?>"></a>
    <h2 class="display-4 font35 text-primary">Vòng lặp do while trong Dart</h2>
    <p>Giống với vòng lặp <code>while</code> nhưng khối lệnh thi hành luôn mà không kiểm tra điều kiện trước, khi khối lệnh
        thi hành xong mới kiểm tra điều kiện để xem có lặp lại hay không</p>
    <p>Cú pháp</p>
    <pre class="prettyprint lang-js">
do {
   //Khối lệnh
}
while (condition);
</pre>
    <p>Ví dụ</p>
    <pre class="prettyprint lang-js">
var i=20;
do {
    print(i);
    i++;
}
while (i<=25);

    //In ra
    20
    21
    22
    23
    24
    25
</pre>
    <p class="alert alert-danger">Vòng lặp <strong>do ... while</strong> khối lệnh luôn được thi hành ít nhất một lần</p>

    <a id="<?= $index_article[5][0] ?>" name="<?= $index_article[5][0] ?>"></a>
    <h2 class="display-4 font35 text-primary">Lệnh continue và break</h2>
    <p>Trong vòng lặp khi gặp <code>continue;</code>  nó sẽ bỏ qua các lệnh còn lại và khởi tạo vòng lặp mới luôn. Còn nếu gặp <code>break;</code> thì bỏ qua các lệnh còn lại đồng thời thoát khỏi vòng lặp.</p>
    <pre class="prettyprint lang-js">
for (i = 0; i <= 70000; i++) {
   if (i == 5) {
      continue;                         //Khởi tạo vòng lặp mới luôn
   }
   print(i);
   if (i >=7) {
        break;                          //Thoát lặp nếu i >=7
    }
}
</pre>
    <pre>
//In ra các số: (bỏ qua 5)
0
1
2
3
4
6
7
</pre>

    <p>Lệnh <code>continue</code> còn dùng để nhảy đến một khối lệnh có nhãn bằng cú pháp</p>
    <pre class="prettyprint lang-js">continue nhãn_khối_lệnh;</pre>
    <p>Lệnh <code>break</code> còn dùng để hủy thi hành khối lệnh bên ngoài có nhãn, với cú pháp:</p>
    <pre class="prettyprint lang-js">break nhãn_khối_lệnh_ngoài;</pre>

    <p>Phần nói về các đối tượng có kiểu liệt kê được (ví dụ như mảng, danh sách ...), còn có các lệnh duyệt qua từng phần tử liệt kê được đó với các lệnh <code>for ... in</code>, <code>for ... of</code>.</p>

    <a id="<?= $index_article[6][0] ?>" name="<?= $index_article[6][0] ?>"></a>
    <h2 class="display-4 font35 text-primary">Test với Assert</h2>
<p>Dart cung cấp lệnh Assert(biểu_thức_logic); để khi chạy mà biểu thức logic sai sẽ dừng chương trình ở đó. Assert là cách
để kiểm tra một biểu thức, vấn đề là nó không có ảnh hưởng gì khi chạy ở chế độ product nó chỉ tác dụng khi phát triển (Chạy debug Ctrl + F5 trong VS)</p>
<pre class="prettyprint lang-js">
// Đảm bảo một đối tượng khác null
assert(myobject != null);

// Đảm bảo số lớn hơn 100
assert(number > 100);
</pre>

<?
echo\XT\Core\Common\Common::createBottomIndex($index_article);
?>