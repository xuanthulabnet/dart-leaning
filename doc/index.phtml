<?
/**
 * @var $this PhpRenderer
 */
$index_article =\XT\Core\Common\Common::sendevent('dynamic_load_phtml',
    ['file'=>'module/Application/view/dynamiccontent/dart.php', 'view'=>$this])->last();

$nav = $index_article->renderlist();

\XT\Core\Common\Common::eventValue(\XT\Core\System\KeyView::startNav(),$nav);

$index_article = [
    ['Exceptions' , '<strong>Exception trong Dart</strong>'],
    ['Throw' , '<strong>Throw Exception</strong>'],
    ['Catch' , '<strong>Catch Exception</strong>'],




];

?>

    <a id="<?=$index_article[0][0]?>" name="<?=$index_article[0][0]?>"></a>
    <h2 class="text-danger display-4 font30">Exception trong Dart</h2>
<p>Dart giống như các ngôn ngữ khác, nó có thể phát sinh các ngoại lệ Exception(thông báo phát sinh lỗi),
nếu ngoại lệ đó không được bạn bắt lại thi chương trình sẽ kết thúc với lỗi.</p>
<p>Dart cung cấp sẵn lớp <code>Exception</code> và lớp <code>Error</code> để bạn sử dụng, hoặc xây dựng
các ngoại lệ. Tạo một ngoại lệ bằng câu lệnh <code>new Exception('Thông báo lỗi');</code></p>
<p>Dart cũng triển khai từ <code>Exception</code>, <code>Error</code> ra nhiều ngoại lệ để sử dụng
cho từng loại lỗi không hợp lệ khác nhau như:</p>
<table class="table table-sm">
    <tr>
        <th>Ngoại lệ</th>
        <th>Sử dụng</th>
    </tr>

    <tr>
        <td style="white-space: nowrap"><code>TimeoutException</code></td>
        <td>Lỗi khi đặt đến giới hạn thời gian chờ async</td>
    </tr>
    <tr>
        <td style="white-space: nowrap"><code>FormatException</code></td>
        <td>Lỗi khi dữ liệu không đúng định dạng</td>
    </tr>
    <tr>
        <td><code>IOException</code></td>
        <td>Lỗi IO (vào/ra), từ nó triển khai các ngoại lệ FileSystemException HttpException ProcessException SignalException SocketException StdinException StdoutException TlsException WebSocketException</td>
    </tr>
</table>
<p>Như vậy tạo một đối tượng Exception dùng cú pháp</p>
<pre class="prettyprint lang-js">
var e = new Exception('Thông báo lỗi');
</pre>

    <a id="<?=$index_article[1][0]?>" name="<?=$index_article[1][0]?>"></a>
    <h2 class="text-danger display-4 font30">Throw - Phát sinh lỗi</h2>
<p>Để phát sinh lỗi bạn dùng từ khóa <code>throw</code> theo sau là <code>Exception</code> muốn phát đi</p>
<p>Ví dụ khi gọi hàm sau mà truyền tham số là 'A' hoặc 'B' thì sẽ phát sinh lỗi</p>
<pre class="prettyprint lang-js">
myfunction(String s) {
    if (s == 'A')
      throw new Exception('Dữ liệu sai');
    if (s == 'B')
      throw new FormatException('Sai dịnh dạng');
}

myfunction('A');

//KẾT QUẢ CHẠY
Unhandled exception:
Exception: Dữ liệu sai
#0 myfunction (file:///D:/dart-learning/main.dart:3:7)
#1 main (file:///D:/dart-learning/main.dart:7:4)
#2 _startIsolate.&lt;anonymous closure&gt; (dart:isolate/runtime/libisolate_patch.dart:289:19)
#3 _RawReceivePortImpl._handleMessage (dart:isolate/runtime/libisolate_patch.dart:171:12)
Exited (255)
</pre>
    <a id="<?=$index_article[2][0]?>" name="<?=$index_article[2][0]?>"></a>
    <h2 class="text-danger display-4 font30">Bắt ngoại lệ với try - catch</h2>
<p>Như đã biết, nếu ngoại lệ phát sinh mà không bắt lại thì sẽ dừng chương trình,
nếu muốn bắt ngoại lệ dùng lệnh <code>try</code> với cú pháp như sau</p>
<pre class="prettyprint lang-js">
try {
   //Các code trong try nếu
   //phát sinh ngoại lệ sẽ được bắt lại
   myfunction('A');
}
on FormatException catch(e) {
    //Khối này bắt nếu lỗi là FormatException
    print('Lỗi xảy ra' + e.message);
}
catch (e) {
    //Khối này bắt lỗi bất kỳ
    print('Lỗi xảy ra' + e.message);
}
finally  {
    //Khối này chạy nếu có catch xảy ra
}
</pre>
<p>Khối <code>finally</code> chạy sau khi bắt lỗi - nếu không cần thì bỏ đi</p>
<p><code>on ... catch</code> để bắt một loại lỗi có kiểu cụ thể nào đó, bạn có thể khai báo nhiều kiểu
để ứng vào kiểu lỗi nào thì chạy khối lệnh tương ứng ở điểm catch đó.</p>
<p>Như vậy, khi lỗi được bắt lại, chương trình vẫn chạy tiếp theo yêu cầu xử lý của code chứ không dừng đột ngột</p>

<?
echo\XT\Core\Common\Common::createBottomIndex($index_article);
?>