<?
/**
 * @var $this PhpRenderer
 */
$index_article =\XT\Core\Common\Common::sendevent('dynamic_load_phtml',
    ['file'=>'module/Application/view/dynamiccontent/dart.php', 'view'=>$this])->last();

$nav = $index_article->renderlist();

\XT\Core\Common\Common::eventValue(\XT\Core\System\KeyView::startNav(),$nav);

$index_article = [
    ['enum' , '<strong>Liệt kê enum</strong>'],
    ['Iterable' , '<strong>Danh sách duyệt qua được Iterable</strong>'],
    ['list' , '<strong>Danh sách (Mảng) List</strong>'],
    ['map' , '<strong>Ánh xạ - Map</strong>'],
    ['set' , '<strong>Tập hợp - Set</strong>'],
    ['other' , '<strong>Một số cấu trúc dữ liệu phức tạp</strong>'],
    ['Queue' , '<i>Hàng đợi - Queue</i>'],
    ['HashMap' , '<i>HashMap</i>'],
    ['HashSet' , '<i>HashSet</i>'],
    ['LinkedList' , '<i>LinkedList</i>'],


];

?>
    <p>Trong phần này chúng ta sẽ tìm hiểu một số cấu trúc dữ liệu cơ bản đã triển khai sẵn trong ngôn ngữ lập trình Dart:</p>

    <a id="<?=$index_article[0][0]?>" name="<?=$index_article[0][0]?>"></a>
    <h2 class="text-danger display-4 font30">Cấu trúc dữ liệu liệt kê enum</h2>
    <p>Trong Dart đây là một loại lớp đặc biệt, biểu diễn một tập hợp cố định các hằng số. Để tạo ra một <code>enum</code>
        dùng từ khóa <code>enum</code> khai báo các phần tử liệt kê theo tên cách nhau bởi <code>,</code> ví dụ:</p>
    <pre class="prettyprint lang-js">
enum UserGroup {guest, member, admin}
</pre>
    <p>Enum rất tiện lợi dùng với câu lệnh <code>switch</code></p>
    <pre class="prettyprint lang-js">
var user_group = UserGroup.admin;
switch (user_group) {
    case UserGroup.admin:
      print('Quản trị hệ thống');
    break;
    case UserGroup.guest:
      print('Khách');
    break;
    default:
}
</pre>
    <a id="<?=$index_article[1][0]?>" name="<?=$index_article[1][0]?>"></a>
    <h2 class="text-danger display-4 font30">Cấu trúc dữ liệu Iterable</h2>
    <p>Iterable là một lớp generic biểu diễn tập hợp dữ liệu mà có thể duyệt qua hết phần tử này đến phần tử khác.
        Nghĩa là nó hỗ trợ <code>moveNext()</code> để đi đến phần tử tiếp theo, lấy dữ liệu phần tử hiện tại
        bằng <code>iterator.current</code>
    </p>
    <p>Thường thì <code>Iterable</code> được tạo ra, liên kết với một loại kiểu dữ liệu tập hợp khác như List, Map ...Xem các
        loại cấu trúc dữ liệu này để tìm hiểu về Interable</p>
    <p>Duyệt qua các phần tử Iterable</p>
    <pre class="prettyprint lang-js">
//Sinh ra Iterable chứa 100 phần tử số từ 0 - đến 99
var iterable = new Iterable.generate(100);
for (var item in iterable) {
    print(item);
}
//0
//1
...
//99
</pre>
    <p>Hoặc duyệt qua bằng forEach</p>
    <pre class="prettyprint">
iterable.forEach((f) {
    print(f);
});
</pre>
    <p><strong>Các phương thức / thuộc tính hay dùng trên mảng - danh sách</strong></p>
    <table class="table table-sm">
        <tr>
            <th>Phương thức</th>
            <th>Sử dụng</th>
        </tr>
        <tr>
            <td><code>isEmpty</code></td>
            <td>Thuộc tính kiểm tra xem mảng rỗng</td>
        </tr>
        <tr>
            <td><code>isNotEmpty</code></td>
            <td>Thuộc tính kiểm tra xem mảng không rỗng</td>
        </tr>
        <tr>
            <td><code>length</code></td>
            <td>Thuộc tính trả về số lượng phần tử mảng</td>
        </tr>
        <tr>
            <td><code>first</code></td>
            <td>Thuộc tính trả về phần tử đầu tiên, tương đương với <code>[0]</code>, lỗi nếu mảng rỗng</td>
        </tr>
        <tr>
            <td><code>last</code></td>
            <td>Thuộc tính trả về phần tử đầu cuối</td>
        </tr>
        <tr>
            <td><code>forEach()</code></td>
            <td>Duyệt qua các phần tử
                <pre class="prettyprint">
  iterable.forEach((f) {
    print(f);
  });
</pre>
            </td>
        </tr>
    </table>

    <a id="<?=$index_article[2][0]?>" name="<?=$index_article[2][0]?>"></a>
    <h2 class="text-danger display-4 font30">Cấu trúc dữ liệu Danh sách - Mảng - List</h2>
    <p>Trong Dart, danh sách (cũng là mảng) được định nghĩa từ lớp generic <code>List</code>, nó chứa một tập hợp các dữ liệu - mỗi
        dữ liệu trong List là gọi là phần tử, vị trí của nó xác định bằng chỉ số bắt đầu từ <code>0</code>, truy cập đến
        mảng (danh sách) dùng ký hiệu <code>[]</code> chứa chỉ số phần tử.</p>
    <p>Có 2 loại List, đó là loại mà số phần tử có thể thay đổi và loại list có số phần tử cố định</p>
    <p><strong>Khởi tạo một mảng cố định</strong></p>
    <pre class="prettyprint">
//Khai báo mảng cố định 2 phần tử
var listState = new List(2);
//Khởi tạo các phần tử trong mảng
listState[0] = 'on';
listState[1] = 'off';
//Nếu truy cập listState[2] sẽ lỗi- vì List chỉ có 2 phần tử
print(listState); //[on, off]
</pre>
    <p><strong>Khởi tạo một mảng thay đổi số phần tử được</strong></p>
    <p>Nếu khi khởi tảo mà không chỉ ra số lượng phần tử thì nó là mảng thay đổi số phần tử được, lúc này có thể áp
        dụng các hàm thêm, bớt phần tử sẽ nói phía dưới</p>
    <pre class="prettyprint">
//Khai báo mảng thay đổi được
var dow = new List();

//Thêm các phần tử vào mảng
dow.add('Monday');
dow.add('Tuesday');
dow.add('Thursday');
print(dow);             //[Monday, Tuesday, Thursday]
//Xóa phần tủ cuối cùng
dow.removeLast();
print(dow);             //[Monday, Tuesday]
</pre>
    <p>Nếu muốn tạo ra mảng thay đổi được, và khởi tạo luôn dữ liệu ở phần khai báo thì dùng ký hiệu <code>[]</code></p>
    <pre class="prettyprint">
//Khởi tạo mảng với 2 phần tử
var group = ['member', 'admin'];
group.insert(0, 'guest'); //Chèn phần tử vào vị trí 0
print(group);             //[guest, member, admin]
</pre>
    <p><strong>Các phương thức / thuộc tính hay dùng trên mảng - danh sách</strong></p>
    <p>Ngoài các phương thức - thuộc tính giống như <code>Iterable</code> chú ý thêm:</p>
    <table class="table table-sm">

        <tr>
            <td><code>reversed</code></td>
            <td>Trả về một đối tượng <code>Iterable</code> chứa các phần tử mảng theo thứ tứ ngược lại</td>
        </tr>

        <tr>
            <td><code>add()</code></td>
            <td>Thêm một phần tử vào cuối <code>add(element)</code></td>
        </tr>
        <tr>
            <td><code>insert()</code></td>
            <td>Chèn một phần tử vào mảng ở vị trí i <code>insert(i,element)</code> </td>
        </tr>
        <tr>
            <td><code>insertAll()</code></td>
            <td>Chèn một một <code>Iterable</code> bắt đầu từ vị trí i: <code>insertAll(i,iterable)</code> </td>
        </tr>
        <tr>
            <td><code>remove()</code></td>
            <td>Xóa bỏ phần tử đầu tiền tìm thấy có giá trị chỉ ra <code>remove(data)</code></td>
        </tr>
        <tr>
            <td><code>removeAt()</code></td>
            <td>Xóa bỏ phần tử ở vị trí i <code>removeAt(i)</code></td>
        </tr>
        <tr>
            <td><code>removeLast()</code></td>
            <td>Xóa bỏ phần tử cuối</td>
        </tr>
        <tr>
            <td><code>removeRange()</code></td>
            <td>Xóa bỏ phần tử từ vị trí start đến vị trí end <code>removeRange(start, end)</code></td>
        </tr>

    </table>
    <a id="<?=$index_article[3][0]?>" name="<?=$index_article[3][0]?>"></a>
    <h2 class="text-danger display-4 font30">Cấu trúc dữ liệu - Map - Ánh xạ</h2>
    <p>Đây là kiểu tập hợp dữ liệu mà mỗi phần tử biểu diễn theo cặp <code>key:value</code></p>
    <p>Các phần tử của Map được truy cập bằng ký hiệu <code>[]</code> chứa <code>key</code> dạng <code>map[key]</code></p>

    <p>Khởi tạo Map có thể dùng toàn tử <code>new</code> hoặc khởi tạo luôn một số phần tử bằng <code>{}</code></p>
    <pre class="prettyprint lang-js">
  //Tạo một map, khới tạo luôn 3 key - nam, age, score
  var student = {
    'name':'Abc',
    'age': 22,
    'score': 'A'
  };
  student['Subject'] = 'Abc';  //Thêm một phần tử
  print(student['name']);      //Truy cập phần tử
</pre>
    <p>Cũng hoàn tạo tạo ra Map từ toán tử <code>new</code></p>
    <pre class="prettyprint lang-js">
  var student = new Map();
  student['age']    = 22;
  student['name']   = 'StudentA';
  student['score']  = 'A';

  //Duyệt qua các phần tử cách 1
  student.forEach((key, value) {
    print('$key : có giá trị $value');
  });

  //Duyệt qua tất cả các phần tử Map (cách 2)
  for (var key in student.keys) {
    print('$key :  ${student[key]}');
  }
</pre>
    <p><strong>Các phương thức / thuộc tính hay dùng trên Map</strong></p>
    <p>Ngoài các phương thức - thuộc tính giống như <code>Iterable</code> xem ở trên chú ý thêm:</p>
    <table class="table table-sm">

        <tr>
            <td><code>addAll</code></td>
            <td>Thêm các phần tử từ một map khác <code>addAll(othemap)</code></td>
        </tr>

        <tr>
            <td><code>clear</code></td>
            <td>Làm rỗng Map <code>clear();</code></td>
        </tr>
        <tr>
            <td><code>containsKey</code></td>
            <td><code>containsKey(key)</code> kiểm tra phần tử với key tồn tại</td>
        </tr>
        <tr>
            <td><code>remove()</code></td>
            <td><code>remove(key)</code> xóa phần tử khỏi map</td>
        </tr>


    </table>

    <a id="<?=$index_article[4][0]?>" name="<?=$index_article[4][0]?>"></a>
    <h2 class="text-danger display-4 font30">Tập hợp - Set</h2>
    <p>Tập hợp như tên gọi là là tập hợp các phần tử, đảm bảo sao cho mỗi phần tử chỉ được xuất hiện 1 lần.</p>
    <p>Khởi tạo một tập hợp bằng toán tử <code>new</code> với cú pháp</p>
    <pre pre class="prettyprint">var s = Set();</pre>
    <p>Nó có các phương thức và cách duyệt qua phần tử giống phần trình bày <code>Iterable</code> ở trên.</p>
    <p>Để thêm một phần tử vào tập hợp dùng hàm <code>add(ele);</code> để loại bỏ phần tử dùng hàm <code>remove(ele);</code>,
        kiểm tra xem có chứa phần tử bằng hàm <code>contains(ele);</code></p>

    <a id="<?=$index_article[5][0]?>" name="<?=$index_article[5][0]?>"></a>
    <h2 class="text-danger display-4 font30">Một số cấu trúc dữ liệu phức tạp</h2>
    <p>Từ các cấu trúc dữ liệu trên, <code>Dart</code> xây dựng thêm các loại cấu trúc
        phức chứa trong thư viện <code>dart:collection</code></p>
    <p>Một số loại như: <code>HashMap</code>, <code>HashSet</code>, <code>LinkedList</code> ...</p>
    <p>Trước khi sử dụng các cấu trúc dữ liệu này cần nạp thư viện bằng lệnh sau ở đầu file</p>
    <pre class="prettyprint lang-js">
import 'dart:collection';
</pre>
    <a id="<?=$index_article[6][0]?>" name="<?=$index_article[6][0]?>"></a>
    <h2 class="text-primary display-4 font25">Hàng đợi - Queue</h2>
    <p>Với hàng đợi Queue thì chỉ tương tác với cấu trúc này ở đầu hàng đợi và cuối hàng đợi (thêm / bớt).</p>
    <table class="table table-sm">

        <tr>
            <td><code>add</code>, <code>addLast</code></td>
            <td>Thêm phần tử vào cuối hàng <code>add(ele);</code> hoặc <code>addLast(ele)</code></td>
        </tr>
        <tr>
            <td><code>addFirst</code></td>
            <td>Thêm phần tử vào đầu hàng <code>addFirst(ele);</code></td>
        </tr>
        <tr>
            <td><code>removeFirst()</code></td>
            <td>Xóa phần tử đầu tiên</td>
        </tr>
        <tr>
            <td><code>removeLast()</code></td>
            <td>Xóa phần tử cuối cùng</td>
        </tr>
        <tr>
            <td><code>remove()</code></td>
            <td>Xóa 1 phần tử <code>remove(ele)</code></td>
        </tr>

    </table>
    <pre class="prettyprint lang-js">
var q = new Queue();
q.add('A');
q.add('B');
q.addFirst('A0');
q.addLast('B0');
print(q);
q.removeFirst();
q.removeLast();
q.remove('B');</pre>
    <p>Xem thêm <code>Iterable</code> để xem cách duyệt qua một cách tương tự.</p>
    <a id="<?=$index_article[7][0]?>" name="<?=$index_article[7][0]?>"></a>
    <h2 class="text-primary display-4 font25">HashMap</h2>
    <p>Sử dụng và ý nghĩa giống <code>Map</code> (khởi tạo <code>new HashMap()</code>), có có điều các đối tượng làm key phải cung cấp
        sự so sánh <code>==</code> thông qua giá trị <code>.hashCode</code></p>
    <p class="alert alert-danger"><strong>HashMap</strong> sử dụng mã hash của đối tượng key để so sánh, tìm kiếm phần tử
        nên HashMap nhanh hơn khi dữ liệu key lớn</p>

    <a id="<?=$index_article[7][0]?>" name="<?=$index_article[7][0]?>"></a>
    <h2 class="text-primary display-4 font25">HashSet</h2>
    <p>Sử dụng và ý nghĩa giống <code>Set</code> (khởi tạo <code>new HashSet()</code>), so sánh <code>==</code> thông qua giá trị <code>.hashCode</code></p>
    <a id="<?=$index_article[8][0]?>" name="<?=$index_article[8][0]?>"></a>
    <h2 class="text-primary display-4 font25">LinkedList</h2>
    <p>Sử dụng và ý nghĩa giống <code>List</code> (khởi tạo <code>new LinkedList()</code>),
        chỉ có điều nó lưu trữ dữ liệu theo cách tối ưu để duyệt qua, tìm kiếm nhanh, tốt để tương quản lý dữ liệu, như chèn và xóa một lượng lớn phần tử</p>

<?
echo\XT\Core\Common\Common::createBottomIndex($index_article);
?>